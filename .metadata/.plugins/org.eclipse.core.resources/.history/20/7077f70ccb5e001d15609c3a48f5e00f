package clase1simple;

public class LCSimple {
	
	private NodoS p;
	
	public LCSimple () {
		p = null;
	}

	public boolean esVacia () {
		return p == null;
	}
	
	public int nroElem () {
		int cnt = 0;
		if (!esVacia()) {
			NodoS r = p;
			cnt = 1;
			while (r.getSig() != p) {
				r = r.getSig();
				cnt++;
			}
		}
		return cnt;
	}
	
	public void adiIni (NodoS x) {
		if (esVacia()) {
			p = x;
		} else {
			NodoS r = p;
			while (r.getSig() != p)
				r = r.getSig();
			
			x.setSig(p);
			r.setSig(x);
			p = x;
		}
	}
	
	public void adiFin (NodoS x) {
		if (esVacia()) {
			p = x;
		} else {
			NodoS r = p;
			while (r.getSig() != p)
				r = r.getSig();
			r.setSig(x);
			x.setSig(p);
		}
	}
	
	public NodoS eliIni () {
		NodoS x = p;
		if (!esVacia()) {
			if (nroElem() == 1) {
				p = null;
			} else {
				NodoS r = p;
				while (r.getSig() != p) {
					r = r.getSig();
				}
				r.setSig(p.getSig());
				p = p.getSig();
				x.setSig(null);
			}
		}
		return x;
	}
	
	public NodoS eliFin () {
		NodoS x = p;
		if (!esVacia()) {
			NodoS r = p;
			while (x.getSig() != p) {
				r = x;
				x = x.getSig();
			}
			r.setSig(p);
			x.setSig(null);
			
		}	
		return x;
	}
	
	public void llenar (int n) {
		for (int i = 1 ;i <= n ;i++) {
			NodoS x = new NodoS();
			x.setElem(new Papel("A"+i, i));
			adiFin(x);
		}
	}
	
	public void mostrar () {
		NodoS r = p;
		int tam = nroElem();
		for (int i = 0 ;i < tam; i++) {
			System.out.println(r.getElem());
			r = r.getElem();
		}
	}
	
	public NodoS getP() {
		return p;
	}

	public void setP(NodoS p) {
		this.p = p;
	}
	
}
